#include <WiFi.h>
#include <PubSubClient.h>
// variables to be set usage specific
// solar Tracking config
// light sensor input pins
const int inputPinLightLevelUp    = 0;
const int inputPinLightLevelDown  = 0;
const int inputPinLightLevelRight = 0;
const int inputPinLightLevelLeft  = 0;

float fineDifferendeCorrection = 5 // means a difference of less than 5째 should be ignored to not overwealm the system

int updateIntervall = 500; // delay(updateIntervall before next calculation)
// system behaviour
bool rebootOnError = false;
bool messageOnError = true;
//WiFi Setup
const char *ssid = "hiemke"; 
const char *password = "gehscheissen";
const char *hostnameWiFi = "HiemkeEsp";
const int baud = 115200;

// MQTT Broker
const char *mqtt_broker = "broker.emqx.io";
const char *topic = "emqx/esp32";
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;

String client_id = "esp32-client-";

// system variables
WiFiClient espClient;
PubSubClient client(espClient);

char* latestTopic;
byte* latestPayload;
unsigned int latestPayloadlength;

bool hasError;
// solar tracking
// head rotation
float headYaw;
float headPitch;
// sun rotation (relative to roof or should we use smth like relative to earth but then we need a compas module or smth)
float sunYaw;
float sunPitch;

void callback(char *topic, byte *payload, unsigned int length) {
  latestPayload = payload;
  latestTopic = topic;
    Serial.print("Message arrived in topic: ");
    Serial.println(topic);
    Serial.print("Message:");
    for (int i = 0; i < length; i++) {
        Serial.print((char) payload[i]);
    }
}

void ConnectToWifi() {
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected...");
    Serial.print("IP address:\t");
    IPAddress myIP = WiFi.localIP();
    Serial.println(myIP);
}

void ConnectToMQTT() {
  while (!client.connected()) {
    client_id += String(WiFi.macAddress());
    Serial.printf("The client %s connects to the public MQTT broker\n", client_id.c_str());
    if (client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
        Serial.println("Public EMQX MQTT broker connected");
    } else {
        Serial.print("failed with state ");
        Serial.print(client.state());
        delay(2000);
    }
  }
}

void controll() {
  // reconnect to wifi
  if (WiFi.status() != WL_CONNECTED) {
    hasError = true;
    Serial.println("WiFi Disconnected...");
    ConnectToWifi();
  }
  // reconnect mqtt
  if (!client.connected()) {
    hasError = true;
    Serial.println("Mqtt Disconected...");
    ConnectToMQTT();
  }
  if (latestTopic == "settingUpdate")) {
    String payload = decipherMQTT();
  }
  if (hasError) {
    if (rebootOnError) {
      ESP.restart();
    }
    if (messageOnError) {
      sendMQTTMessage("error", ("error on %s", client_id));
    }
  }
  hasError = false;
}

void sendMQTTMessage(char* channel, String payload) {
  // to be implemented
}
String decipherMQTT() {
  //to be implemented
  // takes byte* latestPayload
  // returnes a string which contains (mabe json) in some form formatet data, not shure how tbh
}
void setup() {
//WiFi CONNECTION
  Serial.begin(baud); 
  WiFi.hostname(hostnameWiFi);
  WiFi.begin(ssid, password);
  ConnectToWifi();

//MQTT connection
  client.setServer(mqtt_broker, mqtt_port);
  client.setCallback(callback);
  ConnectToMQTT();

// solar tracking
  pinMode(inputPinLightLevelUp,   INPUT);
  pinMode(inputPinLightLevelDown, INPUT);
  pinMode(inputPinLightLevelRight,INPUT);
  pinMode(inputPinLightLevelLeft, INPUT);
}

void loop() {
  controll();
  // request offset of solar head relative to roof
  headYaw;   // 0-360째
  headPitch; // 0-180? (probably smth. like 25째 - 155째)
  // get values from light sensors
  float lightLvlUp = analogRead(inputPinLightLevelUp);
  float lightLvlDown = analogRead(inputPinLightLevelDown);
  float lightLvlRight = analogRead(inputPinLightLevelRight);
  float lightLvlLeft = analogRead(inputPinLightLevelLeft);
  // calculate in what direction sun is relative to currend head positon
  sunPitch;
  sunYaw;
  // update values on pi/on motor for solar (just a example, not shure on implementation, please consider a better sulution)
  sendMQTTMessage("sunPosition", "sunPitch, sunYaw");
  
  delay(updateIntervall);
}
